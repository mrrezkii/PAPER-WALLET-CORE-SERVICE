definitions:
  domain.User:
    properties:
      balance:
        type: number
      createdBy:
        type: string
      createdDate:
        type: string
      currency:
        type: string
      id:
        type: string
      isDeleted:
        type: integer
      name:
        type: string
      scale:
        type: integer
      updatedBy:
        type: string
      updatedDate:
        type: string
      version:
        type: integer
    required:
    - balance
    - currency
    - name
    - scale
    type: object
  user.CreateUserRequestDto:
    properties:
      user:
        $ref: '#/definitions/domain.User'
    type: object
  user.CreateUserResponseDto:
    properties:
      user:
        $ref: '#/definitions/domain.User'
    type: object
  user.UpdateUserRequestDto:
    properties:
      user:
        $ref: '#/definitions/domain.User'
    type: object
  withdraw.WithdrawRequestDto:
    properties:
      amount:
        type: number
      userId:
        type: string
    required:
    - amount
    - userId
    type: object
info:
  contact: {}
paths:
  /paper-wallet-core-service/wallet/withdraw:
    post:
      consumes:
      - application/json
      description: Withdraw funds from the user's wallet
      parameters:
      - description: Withdraw Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/withdraw.WithdrawRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Withdrawal Successful
          schema:
            additionalProperties: true
            type: object
      summary: Withdraw funds from wallet
      tags:
      - wallet-controller
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.User'
            type: array
      summary: Get all users
      tags:
      - user-controller
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserRequestDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.CreateUserResponseDto'
      summary: Create a new user
      tags:
      - user-controller
    put:
      consumes:
      - application/json
      description: Update the details of an existing user based on the provided user
        ID and data
      parameters:
      - description: User Data for Update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
      summary: Update an existing user
      tags:
      - user-controller
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get details of a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
      summary: Get user by ID
      tags:
      - user-controller
swagger: "2.0"
